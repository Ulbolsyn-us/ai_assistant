from fastapi import APIRouter, Depends
from backend.app.db.schemas import ChatRequest, ChatResponse
from backend.app.services.gpt_utils import ask_gpt
from sqlalchemy.orm import Session
from backend.app.db.session import get_db
from backend.app.api.models import Message
from backend.app.services.nlp_utils import is_relevant_to_business
from backend.app.api.templates import get_template_by_name


router = APIRouter()
        
def should_escalate(reply: str) -> bool:
    reply = reply.lower()
    vague_markers = [
        "–Ω–µ –º–æ–≥—É", "–Ω–µ —É–≤–µ—Ä–µ–Ω", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", "–Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ",
        "–≤–æ–∑–º–æ–∂–Ω–æ", "–º–æ–∂–µ—Ç –±—ã—Ç—å", "—è –Ω–µ –∑–Ω–∞—é", "—Ç—Ä—É–¥–Ω–æ —Å–∫–∞–∑–∞—Ç—å",
        "–ª—É—á—à–µ —É—Ç–æ—á–Ω–∏—Ç—å", "—Å–≤—è–∂–∏—Ç–µ—Å—å", "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å", "—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è"
    ]

    too_generic = any(kw in reply for kw in vague_markers)
    # too_long = len(reply) > 300  # —É—Å–ª–æ–≤–∏–µ –ø–æ –¥–ª–∏–Ω–µ

    return too_generic 

@router.post("/chat", response_model=ChatResponse)
async def chat(request: ChatRequest, db: Session = Depends(get_db)):
    
    reply = await ask_gpt(request.message)
    
    if not is_relevant_to_business(request.message):
        # print("‚ö†Ô∏è –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º", request.message)
        return ChatResponse(
            reply = get_template_by_name("not_relevant")
        )
    
    
    needs_operator = should_escalate(reply)
    forward_to_hr = needs_operator and is_relevant_to_business(request.message)
    
    # üîÅ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä—É ‚Äî –∑–∞–º–µ–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    if needs_operator == True:
        reply = get_template_by_name("needs_operator")
    # print("‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î:", request.message, "‚Üí", reply)
    db_message = Message(
        user_id=request.user_id,
        user_message=request.message,
        bot_reply=reply,
        needs_operator=needs_operator,
        forwarded_to_hr=forward_to_hr
    )
    db.add(db_message)
    db.commit()
    
    return ChatResponse(reply=reply)

@router.get("/messages")
def get_all_messages(db: Session = Depends(get_db)):
    messages = db.query(Message).order_by(Message.timestamp.desc()).all()
    return [
        {
            "id": m.id,
            "user_id": m.user_id,
            "user_message": m.user_message,
            "bot_reply": m.bot_reply,
            "timestamp": m.timestamp.isoformat(),
            "needs_operator": m.needs_operator,
            "forwarded_to_hr": m.forwarded_to_hr
            
        }
        for m in messages
    ]
