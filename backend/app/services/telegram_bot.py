
from fastapi import Depends
from sqlalchemy.orm import Session
import os 
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    CallbackQueryHandler, 
    MessageHandler, 
    filters) # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (MessageHandler) / –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ (CallbackQueryHandler) ‚Äî –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ.
from dotenv import load_dotenv
from backend.app.api.models import Message, InterviewInvite
from backend.app.db.session import get_db
import httpx
from backend.app.api.templates import get_template_by_name


load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL") 
API_URL = os.getenv("API_URL", "https://ai-assistant-a7mq.onrender.com/chat")

application = Application.builder().token(BOT_TOKEN).build()


# üü° –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n\n"
        "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ –≤–∞–∫–∞–Ω—Å–∏–∏, —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞–π–º–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ'."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    db = next(get_db())
    
    if update.message is None or update.message.text is None:
        return
    
    user_message = update.message.text
    user_id = str(update.message.from_user.id)
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º callback data –∫–∞–∫ —Ç–µ–∫—Å—Ç
    
    if user_message.strip().lower() == "confirm_interview":
        return
    
    if "—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ" in user_message.lower():
        text = get_template_by_name("interview_invite").format(
            date="26 –∏—é–Ω—è",
            time="15:00",
            link="https://zoom.us/test"
        )
        
        # –ö–Ω–æ–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—á–∞—Å—Ç–∏–µ", callback_data="confirm_interview")]
        ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        
        await update.message.reply_text(
            text,
            reply_markup=keyboard
        )
        
        db_message = Message(
            user_id=user_id,
            user_message=user_message,
            bot_reply="üìÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        )
        db.add(db_message)
        db.commit()
        
        return
    
    async with httpx.AsyncClient(timeout=20.0) as client:
        response = await client.post(
            API_URL,
            json={
                "message": user_message,
                "user_id": user_id
                }
        )
        data = response.json()
        bot_reply = data["reply"]
        
        await update.message.reply_text(bot_reply)
    
async def handle_button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —É—á–∞—Å—Ç–∏–µ")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ InterviewInvite
    db = next(get_db())
    user_id = str(query.from_user.id)
    db.add(InterviewInvite(user_id=user_id, interview_time="2025-06-26 15:00", confirmed=True))
    db.commit()
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î —Ç–∞–±–ª–∏—Ü—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await query.edit_message_text("–°–ø–∞—Å–∏–±–æ, —É—á–∞—Å—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
    
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
application.add_handler(CallbackQueryHandler(handle_button_click))


async def start_bot():
    await application.initialize()
    await application.start()
    await application.bot.set_my_commands([
        ("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
    ])
    await application.bot.set_webhook(url=WEBHOOK_URL)
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    

    
print("‚úÖ –ë–æ—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç...")